
class DECLARATIONS{
protected:
	CTP LCP;
	SETOFSYS FSYS;
	SYMBOLS::SYMBOL LSY;
	bool NOTDONE;
	/* FOR PRETTY DISPLAY OF STACK ANF HEAP */
	char *DUMMYVAR; 
};

class DECLARATIONPART:
	public PASCALCOMPILER,
	public DECLARATIONS
{
public:
class TYP;
class USESDECLARATION;
class PROCDECLARATION;

protected:
	void TYP1(SETOFSYS FSYS, STP &FSP, ADDRRANGE &FSIZE);
	void USESDECLARATION(bool MAGIC);
	void LABELDECLARATION();
	void CONSTDECLARATION();
	void TYPEDECLARATION();
	void VARDECLARATION();
	void PROCDECLARATION(SYMBOLS::SYMBOL,bool);

public:
	DECLARATIONPART ();
	DECLARATIONPART (PASCALCOMPILER *);
	virtual ~DECLARATIONPART ();
	void MAIN (SETOFSYS FSYS);
};

class DECLARATIONPART::TYP:
	public DECLARATIONPART
{
public:
class FIELDLIST;

protected:
	STP			FSP;
	STP			LSP,LSP1,LSP2;
	DISPRANGE	OLDTOP;
	CTP			LCP;
    ADDRRANGE	LSIZE,DISPL;
	int			LMIN,LMAX;
	bool		PACKING;
	BITRANGE	NEXTBIT,NUMBITS;

public:
	TYP();
	TYP(SETOFSYS, STP&, ADDRRANGE &);
	void TYP1(SETOFSYS FSYS, STP &FSP, ADDRRANGE &FSIZE);
	void ALLOCATE(CTP FCP);
	void VARIANTLIST();
	void SIMPLETYPE(SETOFSYS FSYS, STP &FSP, ADDRRANGE &FSIZE);
	void FIELDLIST(SETOFSYS FSYS, STP &FRECVAR);
	bool PACKABLE(STP FSP);	
	void POINTERTYPE();
};

class DECLARATIONPART::TYP::FIELDLIST:
	public DECLARATIONPART::TYP
{
protected:
	CTP LCP,LCP1,NXT,NXT1,LAST;
	STP LSP,LSP1,LSP2,LSP3,LSP4;
	ADDRRANGE MINSIZE,MAXSIZE,LSIZE;
	VALU LVALU;
	BITRANGE MAXBIT,MINBIT;
	STP	FRECVAR; //passed into constructor 

protected:
	void ALLOCATE(CTP FCP);
	void VARIANTLIST();

public:
	FIELDLIST(SETOFSYS FSYS, STP &FRECVAR);
};

typedef struct _DCREC_
{
	int DISKADDR;
	int	INTEGERCODELENG;
} DCREC;

class DECLARATIONPART::USESDECLARATION:
	public DECLARATIONPART
{
protected:
	struct _SEGDICT_
	{
		DCREC DANDC[MAXSEG];
        ALPHA SEGNAME[MAXSEG];
        int   SEGKIND[MAXSEG];
        int	  TEXTADDR[MAXSEG];
        int   FILLER[128];
	} SEGDICT;
	bool		FOUND;
	int			BEGADDR;
    CTP			LCP;
	LEXSTKREC	LLEXSTK;
	ALPHA		LNAME;
	SYMBOLS::SYMBOL      LSY;
	OPERATOR	LOP;
	ALPHA		LID;
	bool		MAGIC;

protected:
	USESDECLARATION(bool MAGIC);
	void GETTEXT(bool &FOUND);
};

class DECLARATIONPART::PROCDECLARATION:
	public DECLARATIONPART
{
protected:
	SYMBOLS::SYMBOL	LSY;
	CTP			LCP,LCP1;
	STP			LSP;
	bool		EXTONLY,FORW;
	ADDRRANGE	LCM;
	LEXSTKREC	LLEXSTK;

protected:
	PROCDECLARATION(SYMBOLS::SYMBOL FSY, bool SEGDEC);
	void PARAMETERLIST(SETOFSYS, CTP &, CTP);
};
